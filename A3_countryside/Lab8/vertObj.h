#include "parseOBJ.h"

float vertices[] =
{
	//back face
	//pos					//col				//normal
	//0.f, 0.f, 0.f,  	1.f, .0f, .0f,	0.0f, 0.0f, -1.0f,
	-0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, -1.0f,
	0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, -1.0f,
	0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, -1.0f,
	0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, -1.0f,
	-0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, -1.0f,
	-0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, -1.0f,

	//front face
	-0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, 1.0f,
	0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, 1.0f,
	0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, 1.0f,
	0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 0.0f, 1.0f,

	//left face
	-0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	-1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	-1.0f, 0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	-1.0f, 0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	-1.0f, 0.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	-1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	-1.0f, 0.0f, 0.0f,

	//right face
	0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	1.0f, 0.0f, 0.0f,
	0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	1.0f, 0.0f, 0.0f,
	0.5f, -0.5f, -0.5f, 	1.0f, 1.0f, 0.8f,	1.0f, 0.0f, 0.0f,
	0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	1.0f, 0.0f, 0.0f,
	0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	1.0f, 0.0f, 0.0f,
	0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	1.0f, 0.0f, 0.0f,

	//bottom face
	-0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, -1.0f, 0.0f,
	0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, -1.0f, 0.0f,
	0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, -1.0f, 0.0f,
	0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, -1.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, -1.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, -1.0f, 0.0f,

	//top face
	-0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 1.0f, 0.0f,
	0.5f,  0.5f, -0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 1.0f, 0.0f,
	0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 1.0f, 0.0f,
	0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  	1.0f, 1.0f, 0.8f,	0.0f, 1.0f, 0.0f,
	-0.5f,  0.5f, -0.5f, 	1.0f, 1.0f, 0.8f,	0.0f, 1.0f, 0.0f
};

float crt_vert[] =
{
	//TT
	// TTL
	-0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 0.0f,				//v3 top left
	-0.5f, 0.6f, 0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 0.0f,				//v3 top right
	0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 0.0f,				//v3
	// TTR
	-0.5f, 0.6f, 0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 0.0f,				//v3
	0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 0.0f,				//v3
	0.5f, 0.6f, 0.5f,  		0.f, 0.7f, 1.f,		0.0f, 1.0f, 0.0f,				//v3

	//TB
	//TL
	//pos					//col				//normal: x:-l+r, y: +t-b, z: +f-b
	-1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		-1.0f, 1.0f, 0.0f,				//v1 bottom left point; normal: x:-l+r, y: +t-b, z: +f-b
	-1.0f, 0.0f, 1.0f,  	0.f, 0.7f, 1.f,		-1.0f, 1.0f, 0.0f,				//v2 bottom right
	-0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		-1.0f, 1.0f, 0.0f,				//v3 top left
	-1.0f, 0.0f, 1.0f,  	0.f, 0.7f, 1.f,		-1.0f, 1.0f, 0.0f,				//v2 bottom right
	-0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		-1.0f, 1.0f, 0.0f,				//v3 top left
	-0.5f, 0.6f, 0.5f,  	0.f, 0.7f, 1.f,		-1.0f, 1.0f, 0.0f,				//v3 top right
	//TB
	//pos					//col				//normal: x:-l+r, y: +t-b, z: +f-b
	-1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, -1.0f,				//v1 tr
	1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, -1.0f,				//v2 tl
	0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, -1.0f,				//v3
	-1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, -1.0f,				//v1 tr
	-0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, -1.0f,				//v3
	0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, -1.0f,				//v3
	//TR
	//pos					//col
	1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		1.0f, 1.0f, 0.0f,				//v1
	1.0f, 0.0f, 1.0f,  		0.f, 0.7f, 1.f,		1.0f, 1.0f, 0.0f,				//v2
	0.5f, 0.6f, 0.5f,  		0.f, 0.7f, 1.f,		1.0f, 1.0f, 0.0f,				//v3
	1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		1.0f, 1.0f, 0.0f,				//v1
	0.5f, 0.6f, -0.5f,  	0.f, 0.7f, 1.f,		1.0f, 1.0f, 0.0f,				//v3
	0.5f, 0.6f, 0.5f,  		0.f, 0.7f, 1.f,		1.0f, 1.0f, 0.0f,				//v3
	//TF
	//pos					//col
	1.0f, 0.0f, 1.0f,  		0.f, 0.7f, 1.f,		0.0f, 1.0f, 1.0f,				//v1
	-1.0f, 0.0f, 1.0f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 1.0f,				//v2
	-0.5f, 0.6f, 0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 1.0f,				//v3
	1.0f, 0.0f, 1.0f,  		0.f, 0.7f, 1.f,		0.0f, 1.0f, 1.0f,				//v1
	0.5f, 0.6f, 0.5f,  		0.f, 0.7f, 1.f,		0.0f, 1.0f, 1.0f,				//v3
	-0.5f, 0.6f, 0.5f,  	0.f, 0.7f, 1.f,		0.0f, 1.0f, 1.0f,				//v3

	//BL
	//pos					//col				//normal: x:-l+r, y: +t-b, z: +f-b
	-1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		-1.0f, -1.0f, 0.0f,				//v1
	-1.0f, 0.0f, 1.0f,  	0.f, 0.7f, 1.f,		-1.0f, -1.0f, 0.0f,				//v2
	0.0f, -1.2f, 0.0f,  	0.f, 0.7f, 1.f,		-1.0f, -1.0f, 0.0f,				//v3
	//BB
	//pos					//col
	-1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		0.0f, -1.0f, -1.0f,				//v1
	1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		0.0f, -1.0f, -1.0f,				//v2
	0.0f, -1.2f, 0.0f,  	0.f, 0.7f, 1.f,		0.0f, -1.0f, -1.0f,				//v3
	//BR
	//pos					//col
	1.0f, 0.0f, -1.0f,  	0.f, 0.7f, 1.f,		1.0f, -1.0f, 0.0f,				//v1
	1.0f, 0.0f, 1.0f,  		0.f, 0.7f, 1.f,		1.0f, -1.0f, 0.0f,				//v2
	0.0f, -1.2f, 0.0f,  	0.f, 0.7f, 1.f,		1.0f, -1.0f, 0.0f,				//v3
	//BF
	//pos					//col
	1.0f, 0.0f, 1.0f,  		0.f, 0.7f, 1.f,		0.0f, -1.0f, 1.0f,				//v1
	-1.0f, 0.0f, 1.0f,  	0.f, 0.7f, 1.f,		0.0f, -1.0f, 1.0f,				//v2
	0.0f, -1.2f, 0.0f,  	0.f, 0.7f, 1.f,		0.0f, -1.0f, 1.0f,				//v3
};

float grs_vert[] =
{
	//back face
	//pos					//col				//normal: x:-l+r, y: +t-b, z: +f-b
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, -1.0f,
	0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, -1.0f,
	0.5f,  0.5f, -0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, -1.0f,
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, -1.0f,
	0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, -1.0f,
	-0.5f,  0.5f, -0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, -1.0f,

	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	0.f, -0.5f, -0.f,  		0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,//
	0.5f,  0.5f, -0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	-0.f, -0.5f, -0.f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f, //
	0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,

	//front face
	//x: lf, y: tb, z: fb
	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,

	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	0.f, -0.5f,  0.f,  		0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f, //
	0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	-0.f, -0.5f,  0.f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,//
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	0.0f, 0.0f, 1.0f,

	//left face
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,

	-0.f, -0.5f, -0.f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,//
	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,
	-0.f, -0.5f,  0.f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,//
	-0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	-1.0f, 0.0f, 0.0f,

	//right face
	//x: fb, y: tb, z: lr
	0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,
	0.5f,  0.5f,  -0.5f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,
	0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f, //bl
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f, //br
	0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,

	0.f, -0.5f, -0.f,  		0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,//
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,
	0.5f,  0.5f,  -0.5f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,
	0.f, -0.5f, -0.f,  		0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f, //bl //
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f, //br
	0.5f,  0.5f,  0.5f,  	0.f, 1.0f, 0.0f,	1.0f, 0.0f, 0.0f,


	//bottom face
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, -1.0f,0.0f,
	0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, -1.0f, 0.0f,
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, -1.0f, 0.0f,
	0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, -1.0f, 0.0f,
	-0.3f, -0.5f,  0.3f,  	0.f, 1.0f, 0.0f,	0.0f, -1.0f, 0.0f,
	-0.3f, -0.5f, -0.3f,  	0.f, 1.0f, 0.0f,	0.0f, -1.0f, 0.0f,
};

// Circle --> Cylinder
float* CreateCylinder(int num_segments, float radius)
{
	//allocate memory for dynamic array of vertices
	float* cld_verts = (float*)malloc(sizeof(float) * num_segments * 4 * 3 * 9);

	float offset = 360.0f / num_segments;

	float angle = 0.0f;
	for (int i = 0; i < num_segments; i++)
	{
		// Bottom Side
		cld_verts[(i * 108) + 0] = 0.0f;
		cld_verts[(i * 108) + 1] = 0.0f;
		cld_verts[(i * 108) + 2] = 0.0f;
		// rgb
		cld_verts[(i * 108) + 3] = 1.f;
		cld_verts[(i * 108) + 4] = 1.f;
		cld_verts[(i * 108) + 5] = 1.f;
		//specify vertex v1 using angle;
		cld_verts[(i * 108) + 9] = sin(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 10] = cos(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 11] = .0f;
		// rgb
		cld_verts[(i * 108) + 12] = 0.35f;
		cld_verts[(i * 108) + 13] = 0.27f;
		cld_verts[(i * 108) + 14] = 0.1f;
		//specify vertex v2 using (angle + offset);
		cld_verts[(i * 108) + 18] = sin(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 19] = cos(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 20] = 0.0f;
		// rgb
		cld_verts[(i * 108) + 21] = 0.35f;
		cld_verts[(i * 108) + 22] = 0.27f;
		cld_verts[(i * 108) + 23] = 0.1f;
		// Calculate Normal: 
		glm::vec3 v11 = glm::vec3(cld_verts[(i * 108) + 9] - cld_verts[(i * 108) + 0],
			cld_verts[(i * 108) + 10] - cld_verts[(i * 108) + 1],
			cld_verts[(i * 108) + 11] - cld_verts[(i * 108) + 2]);
		glm::vec3 v12 = glm::vec3(cld_verts[(i * 108) + 18] - cld_verts[(i * 108) + 0],
			cld_verts[(i * 108) + 19] - cld_verts[(i * 108) + 1],
			cld_verts[(i * 108) + 20] - cld_verts[(i * 108) + 2]);
		glm::vec3 n1 = normalize(cross(v11, v12));
		// normal
		cld_verts[(i * 108) + 6] = n1.x;
		cld_verts[(i * 108) + 7] = n1.y;
		cld_verts[(i * 108) + 8] = n1.z;
		// normal
		cld_verts[(i * 108) + 15] = n1.x;
		cld_verts[(i * 108) + 16] = n1.y;
		cld_verts[(i * 108) + 17] = n1.z;
		// normal
		cld_verts[(i * 108) + 24] = n1.x;
		cld_verts[(i * 108) + 25] = n1.y;
		cld_verts[(i * 108) + 26] = n1.z;

		// Top Side
		cld_verts[(i * 108) + 27] = 0.0f;
		cld_verts[(i * 108) + 28] = 0.0f;
		cld_verts[(i * 108) + 29] = 2.0f;
		// rgb
		cld_verts[(i * 108) + 30] = 1.f;
		cld_verts[(i * 108) + 31] = 1.f;
		cld_verts[(i * 108) + 32] = 1.f;
		//specify vertex v1 using angle;
		cld_verts[(i * 108) + 36] = sin(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 37] = cos(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 38] = 2.0f;
		// rgb
		cld_verts[(i * 108) + 39] = 0.35f;
		cld_verts[(i * 108) + 40] = 0.27f;
		cld_verts[(i * 108) + 41] = 0.1f;
		//specify vertex v2 using (angle + offset);
		cld_verts[(i * 108) + 45] = sin(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 46] = cos(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 47] = 2.0f;
		// rgb
		cld_verts[(i * 108) + 48] = 0.35f;
		cld_verts[(i * 108) + 49] = 0.27f;
		cld_verts[(i * 108) + 50] = 0.1f;
		// Calculate Normal: 
		glm::vec3 v21 = glm::vec3(cld_verts[(i * 108) + 36] - cld_verts[(i * 108) + 27],
			cld_verts[(i * 108) + 37] - cld_verts[(i * 108) + 28],
			cld_verts[(i * 108) + 38] - cld_verts[(i * 108) + 29]);
		glm::vec3 v22 = glm::vec3(cld_verts[(i * 108) + 45] - cld_verts[(i * 108) + 27],
			cld_verts[(i * 108) + 46] - cld_verts[(i * 108) + 28],
			cld_verts[(i * 108) + 47] - cld_verts[(i * 108) + 29]);
		glm::vec3 n2 = normalize(cross(v21, v22));
		// normal
		cld_verts[(i * 108) + 33] = -n2.x;
		cld_verts[(i * 108) + 34] = -n2.y;
		cld_verts[(i * 108) + 35] = -n2.z;
		// normal
		cld_verts[(i * 108) + 42] = -n2.x;
		cld_verts[(i * 108) + 43] = -n2.y;
		cld_verts[(i * 108) + 44] = -n2.z;
		// normal
		cld_verts[(i * 108) + 51] = -n2.x;
		cld_verts[(i * 108) + 52] = -n2.y;
		cld_verts[(i * 108) + 53] = -n2.z;

		// Bottom right One Triangle Side
		//specify vertex v1 using angle;
		cld_verts[(i * 108) + 54] = sin(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 55] = cos(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 56] = 0.0f;
		// rgb
		cld_verts[(i * 108) + 57] = 1;
		cld_verts[(i * 108) + 58] = 1;
		cld_verts[(i * 108) + 59] = 0.0f;
		//specify vertex v2 using (angle + offset);
		cld_verts[(i * 108) + 63] = sin(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 64] = cos(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 65] = 0.0f;
		// rgb
		cld_verts[(i * 108) + 66] = 1;
		cld_verts[(i * 108) + 67] = 1;
		cld_verts[(i * 108) + 68] = 0.0f;
		//specify vertex v2 using (angle + offset);
		cld_verts[(i * 108) + 72] = sin(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 73] = cos(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 74] = 2.0f;
		// rgb
		cld_verts[(i * 108) + 75] = 1;
		cld_verts[(i * 108) + 76] = 1;
		cld_verts[(i * 108) + 77] = 0.0f;
		// Calculate Normal: 
		glm::vec3 v31 = glm::vec3(cld_verts[(i * 108) + 63] - cld_verts[(i * 108) + 54],
			cld_verts[(i * 108) + 64] - cld_verts[(i * 108) + 55],
			cld_verts[(i * 108) + 65] - cld_verts[(i * 108) + 56]);
		glm::vec3 v32 = glm::vec3(cld_verts[(i * 108) + 72] - cld_verts[(i * 108) + 54],
			cld_verts[(i * 108) + 73] - cld_verts[(i * 108) + 55],
			cld_verts[(i * 108) + 74] - cld_verts[(i * 108) + 56]);
		glm::vec3 n3 = normalize(cross(v31, v32));
		// normal
		cld_verts[(i * 108) + 60] = -n3.x;
		cld_verts[(i * 108) + 61] = -n3.y;
		cld_verts[(i * 108) + 62] = -n3.z;
		// normal
		cld_verts[(i * 108) + 69] = -n3.x;
		cld_verts[(i * 108) + 70] = -n3.y;
		cld_verts[(i * 108) + 71] = -n3.z;
		// normal
		cld_verts[(i * 108) + 78] = -n3.x;
		cld_verts[(i * 108) + 79] = -n3.y;
		cld_verts[(i * 108) + 80] = -n3.z;
		cld_verts[(i * 108) + 80] = -n3.z;

		// Top left One Triangle Side
		//specify vertex v1 using angle;
		cld_verts[(i * 108) + 81] = sin(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 82] = cos(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 83] = 2.0f;
		// rgb
		cld_verts[(i * 108) + 84] = 1;
		cld_verts[(i * 108) + 85] = 1;
		cld_verts[(i * 108) + 86] = 0;
		//specify vertex v2 using (angle + offset);
		cld_verts[(i * 108) + 90] = sin(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 91] = cos(DEG2RAD(angle) + DEG2RAD(offset)) * radius;
		cld_verts[(i * 108) + 92] = 2.0f;
		// rgb
		cld_verts[(i * 108) + 93] = 1;
		cld_verts[(i * 108) + 94] = 1;
		cld_verts[(i * 108) + 95] = 0;
		//specify vertex v2 using (angle + offset);
		cld_verts[(i * 108) + 99] = sin(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 100] = cos(DEG2RAD(angle)) * radius;
		cld_verts[(i * 108) + 101] = 0.0f;
		// rgb
		cld_verts[(i * 108) + 102] = 1;
		cld_verts[(i * 108) + 103] = 1;
		cld_verts[(i * 108) + 104] = 0;
		// Calculate Normal: 
		glm::vec3 v41 = glm::vec3(cld_verts[(i * 108) + 90] - cld_verts[(i * 108) + 81],
			cld_verts[(i * 108) + 91] - cld_verts[(i * 108) + 82],
			cld_verts[(i * 108) + 92] - cld_verts[(i * 108) + 83]);
		glm::vec3 v42 = glm::vec3(cld_verts[(i * 108) + 99] - cld_verts[(i * 108) + 81],
			cld_verts[(i * 108) + 100] - cld_verts[(i * 108) + 82],
			cld_verts[(i * 108) + 101] - cld_verts[(i * 108) + 83]);
		glm::vec3 n4 = normalize(cross(v41, v42));
		// normal
		cld_verts[(i * 108) + 87] = n4.x;
		cld_verts[(i * 108) + 88] = n4.y;
		cld_verts[(i * 108) + 89] = n4.z;
		// normal
		cld_verts[(i * 108) + 96] = n4.x;
		cld_verts[(i * 108) + 97] = n4.y;
		cld_verts[(i * 108) + 98] = n4.z;
		// normal
		cld_verts[(i * 108) + 105] = n4.x;
		cld_verts[(i * 108) + 106] = n4.y;
		cld_verts[(i * 108) + 107] = n4.z;

		angle += offset;

	}
	return cld_verts;
}

//CREATE Cylinder HERE
int cld_num_segs = 30;
float* cld_vert = CreateCylinder(cld_num_segs, 0.5f);

//CREATE Prism HERE
int prs_num_segs = 3;
float* cirP_vert = CreateCylinder(prs_num_segs, 0.5f);


// Plane with texture
float vert_plane[] =
{
	//t1				
	//pos					//col	//nor		//tex
	-0.9f, 0.9f, 0.0f,		0,0,0,	0,0,-1,		0.0f, 1.0f, //tl
	0.9f, 0.9f, 0.0f,		0,0,0,	0,0,-1,		1.0f, 1.0f, //tr
	0.9f, -0.9f, 0.0f,		0,0,0,	0,0,-1,		1.0f, 0.0f, //br
	//t2					
	//pos					//col	//nor		//tex
	-0.9f, 0.9f, 0.0f,		0,0,0,	0,0,-1,		0.0f, 1.0f, //tl
	0.9f, -0.9f, 0.0f,		0,0,0,	0,0,-1,		1.0f, 0.0f, //br
	-0.9f, -0.9f, 0.0f,		0,0,0,	0,0,-1,		0.0f, 0.0f, //bl
};

//CUEBE with TEXTURE
float cubeVertices[] = {
	// Positions           // Colors           // Normals           // Texture Coords
	// Front Face
	-0.5f, -0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 1.0f,

	// Back Face
	-0.5f, -0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f, -1.0f,  1.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 0.0f, -1.0f,  0.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f, -1.0f,  0.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f, -1.0f,  1.0f, 1.0f,

	// Left Face
	-0.5f, -0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   -1.0f, 0.0f, 0.0f,  0.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   -1.0f, 0.0f, 0.0f,  1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   -1.0f, 0.0f, 0.0f,  1.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,   1.0f, 1.0f, 0.0f,   -1.0f, 0.0f, 0.0f,  0.0f, 1.0f,

	// Right Face
	 0.5f, -0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,   1.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f,

	 // Top Face
	 -0.5f,  0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f,
	  0.5f,  0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,
	  0.5f,  0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   0.0f, 1.0f, 0.0f,   1.0f, 1.0f,
	 -0.5f,  0.5f, -0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f, 0.0f,   0.0f, 1.0f,

	 // Bottom Face
	 -0.5f, -0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   0.0f, -1.0f, 0.0f,  0.0f, 0.0f,
	  0.5f, -0.5f, -0.5f,   1.0f, 1.0f, 0.0f,   0.0f, -1.0f, 0.0f,  1.0f, 0.0f,
	  0.5f, -0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   0.0f, -1.0f, 0.0f,  1.0f, 1.0f,
	 -0.5f, -0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   0.0f, -1.0f, 0.0f,  0.0f, 1.0f
};


// OBJ HERE
float obj_Verts[] =
{
	 -1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.356293f, 0.222157f, -0.0209625f,
	-0.837513f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     -0.356293f, 0.222157f, -0.0209625f,
	-1.03383f, 0.914944f, -0.426114f,     1.0f, 1.0f, 1.0f,     -0.356293f, 0.222157f, -0.0209625f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     0.239852f, 0.212622f, -0.198488f,
	0.082952f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     0.239852f, 0.212622f, -0.198488f,
	0.426636f, 0.752255f, -0.231313f,     1.0f, 1.0f, 1.0f,     0.239852f, 0.212622f, -0.198488f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.333619f, 0.317534f, 0.0529412f,
	0.082952f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     0.333619f, 0.317534f, 0.0529412f,
	0.503013f, 0.776861f, 1.07094f,     1.0f, 1.0f, 1.0f,     0.333619f, 0.317534f, 0.0529412f,
	-0.37728f, 1.36379f, 0.921559f,     1.0f, 1.0f, 1.0f,     -0.202435f, 0.108836f, 0.37561f,
	-0.754927f, 0.727201f, 0.902481f,     1.0f, 1.0f, 1.0f,     -0.202435f, 0.108836f, 0.37561f,
	-0.162844f, 0.730648f, 1.22059f,     1.0f, 1.0f, 1.0f,     -0.202435f, 0.108836f, 0.37561f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.295643f, -0.93017f, 0.385289f,
	0.923074f, 0.29337f, 1.32375f,     1.0f, 1.0f, 1.0f,     0.295643f, -0.93017f, 0.385289f,
	0.051592f, 0.097509f, 1.51961f,     1.0f, 1.0f, 1.0f,     0.295643f, -0.93017f, 0.385289f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.0824528f, 0.259419f, 0.107454f,
	-0.837513f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     -0.0824528f, 0.259419f, 0.107454f,
	-0.37728f, 1.36379f, 0.921559f,     1.0f, 1.0f, 1.0f,     -0.0824528f, 0.259419f, 0.107454f,
	-0.837513f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     -0.0824527f, 0.259418f, -0.107454f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.0824527f, 0.259418f, -0.107454f,
	-0.37728f, 1.36379f, -0.205776f,     1.0f, 1.0f, 1.0f,     -0.0824527f, 0.259418f, -0.107454f,
	0.455915f, 0.361754f, -0.240278f,     1.0f, 1.0f, 1.0f,     0.450158f, -0.431464f, -0.177254f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.450158f, -0.431464f, -0.177254f,
	0.053012f, 0.096279f, -0.61729f,     1.0f, 1.0f, 1.0f,     0.450158f, -0.431464f, -0.177254f,
	0.426636f, 0.752255f, -0.231313f,     1.0f, 1.0f, 1.0f,     0.401906f, 0.286068f, -0.13303f,
	0.186387f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.401906f, 0.286068f, -0.13303f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.401906f, 0.286068f, -0.13303f,
	-0.837513f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     -0.206441f, 0.0008894f, 0.207728f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.206441f, 0.0008894f, 0.207728f,
	-0.754927f, 0.727201f, 0.902481f,     1.0f, 1.0f, 1.0f,     -0.206441f, 0.0008894f, 0.207728f,
	-0.964891f, 0.226979f, -0.59293f,     1.0f, 1.0f, 1.0f,     -0.436493f, -1.24729f, -0.257592f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     -0.436493f, -1.24729f, -0.257592f,
	-1.09574f, 0.047143f, 0.499585f,     1.0f, 1.0f, 1.0f,     -0.436493f, -1.24729f, -0.257592f,
	0.082952f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     0.107454f, 0.259418f, -0.0824527f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.107454f, 0.259418f, -0.0824527f,
	0.186387f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.107454f, 0.259418f, -0.0824527f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.107454f, 0.259418f, 0.0824527f,
	0.082952f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     0.107454f, 0.259418f, 0.0824527f,
	0.186387f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.107454f, 0.259418f, 0.0824527f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     -0.162167f, -0.536244f, 0.507452f,
	-0.692435f, 0.351727f, 0.950336f,     1.0f, 1.0f, 1.0f,     -0.162167f, -0.536244f, 0.507452f,
	-1.09574f, 0.047143f, 0.499585f,     1.0f, 1.0f, 1.0f,     -0.162167f, -0.536244f, 0.507452f,
	0.082952f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     0.0606701f, 0.231199f, 0.341348f,
	-0.162844f, 0.730648f, 1.22059f,     1.0f, 1.0f, 1.0f,     0.0606701f, 0.231199f, 0.341348f,
	0.503013f, 0.776861f, 1.07094f,     1.0f, 1.0f, 1.0f,     0.0606701f, 0.231199f, 0.341348f,
	-1.03383f, 0.914944f, -0.426114f,     1.0f, 1.0f, 1.0f,     -0.100158f, 0.383464f, -0.482695f,
	-0.37728f, 1.36379f, -0.205776f,     1.0f, 1.0f, 1.0f,     -0.100158f, 0.383464f, -0.482695f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     -0.100158f, 0.383464f, -0.482695f,
	-0.964891f, 0.226979f, -0.59293f,     1.0f, 1.0f, 1.0f,     -0.0262729f, -0.0617612f, -0.766464f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     -0.0262729f, -0.0617612f, -0.766464f,
	0.053012f, 0.096279f, -0.61729f,     1.0f, 1.0f, 1.0f,     -0.0262729f, -0.0617612f, -0.766464f,
	0.503013f, 0.776861f, 1.07094f,     1.0f, 1.0f, 1.0f,     0.0451806f, 0.302596f, 0.503627f,
	0.051592f, 0.097509f, 1.51961f,     1.0f, 1.0f, 1.0f,     0.0451806f, 0.302596f, 0.503627f,
	0.923074f, 0.29337f, 1.32375f,     1.0f, 1.0f, 1.0f,     0.0451806f, 0.302596f, 0.503627f,
	-0.692435f, 0.351727f, 0.950336f,     1.0f, 1.0f, 1.0f,     -0.340859f, -0.028798f, 0.324441f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.340859f, -0.028798f, 0.324441f,
	-1.09574f, 0.047143f, 0.499585f,     1.0f, 1.0f, 1.0f,     -0.340859f, -0.028798f, 0.324441f,
	0.455915f, 0.361754f, -0.240278f,     1.0f, 1.0f, 1.0f,     0.42601f, 0.29163f, -0.296573f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.42601f, 0.29163f, -0.296573f,
	1.11893f, 0.097509f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.42601f, 0.29163f, -0.296573f,
	-0.162844f, 0.730648f, 1.22059f,     1.0f, 1.0f, 1.0f,     -0.284413f, 0.100411f, 0.416559f,
	-0.692435f, 0.351727f, 0.950336f,     1.0f, 1.0f, 1.0f,     -0.284413f, 0.100411f, 0.416559f,
	0.051592f, 0.097509f, 1.51961f,     1.0f, 1.0f, 1.0f,     -0.284413f, 0.100411f, 0.416559f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.561012f, 0.415592f, 0.0326823f,
	0.923074f, 0.29337f, 1.32375f,     1.0f, 1.0f, 1.0f,     0.561012f, 0.415592f, 0.0326823f,
	1.11893f, 0.097509f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.561012f, 0.415592f, 0.0326823f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     0.303798f, 0.0105476f, -0.332088f,
	0.455915f, 0.361754f, -0.240278f,     1.0f, 1.0f, 1.0f,     0.303798f, 0.0105476f, -0.332088f,
	0.053012f, 0.096279f, -0.61729f,     1.0f, 1.0f, 1.0f,     0.303798f, 0.0105476f, -0.332088f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.829181f, -0.0661565f, -0.110201f,
	-0.964891f, 0.226979f, -0.59293f,     1.0f, 1.0f, 1.0f,     -0.829181f, -0.0661565f, -0.110201f,
	-1.09574f, 0.047143f, 0.499585f,     1.0f, 1.0f, 1.0f,     -0.829181f, -0.0661565f, -0.110201f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.271907f, 0.0842959f, -0.0800543f,
	-0.940947f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.271907f, 0.0842959f, -0.0800543f,
	-0.837513f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     -0.271907f, 0.0842959f, -0.0800543f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     0.100635f, 0.251466f, -0.196307f,
	-0.37728f, 1.36379f, -0.205776f,     1.0f, 1.0f, 1.0f,     0.100635f, 0.251466f, -0.196307f,
	0.082952f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     0.100635f, 0.251466f, -0.196307f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.28651f, 0.219476f, 0.113718f,
	0.186387f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.28651f, 0.219476f, 0.113718f,
	0.082952f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     0.28651f, 0.219476f, 0.113718f,
	-0.37728f, 1.36379f, 0.921559f,     1.0f, 1.0f, 1.0f,     -0.0638719f, 0.0302816f, 0.253916f,
	-0.837513f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     -0.0638719f, 0.0302816f, 0.253916f,
	-0.754927f, 0.727201f, 0.902481f,     1.0f, 1.0f, 1.0f,     -0.0638719f, 0.0302816f, 0.253916f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.385289f, -0.93017f, 0.295643f,
	1.11893f, 0.097509f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.385289f, -0.93017f, 0.295643f,
	0.923074f, 0.29337f, 1.32375f,     1.0f, 1.0f, 1.0f,     0.385289f, -0.93017f, 0.295643f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.107454f, 0.259418f, 0.0824525f,
	-0.940947f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.107454f, 0.259418f, 0.0824525f,
	-0.837513f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     -0.107454f, 0.259418f, 0.0824525f,
	-0.837513f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     -0.107454f, 0.259418f, -0.0824525f,
	-0.940947f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.107454f, 0.259418f, -0.0824525f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.107454f, 0.259418f, -0.0824525f,
	0.455915f, 0.361754f, -0.240278f,     1.0f, 1.0f, 1.0f,     0.306181f, -0.739186f, -0.575167f,
	1.11893f, 0.097509f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.306181f, -0.739186f, -0.575167f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     0.306181f, -0.739186f, -0.575167f,
	0.426636f, 0.752255f, -0.231313f,     1.0f, 1.0f, 1.0f,     0.220502f, 0.171515f, -0.088104f,
	0.082952f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     0.220502f, 0.171515f, -0.088104f,
	0.186387f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.220502f, 0.171515f, -0.088104f,
	-0.837513f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     -0.241915f, 0.114288f, 0.0800543f,
	-0.940947f, 1.36379f, 0.357891f,     1.0f, 1.0f, 1.0f,     -0.241915f, 0.114288f, 0.0800543f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.241915f, 0.114288f, 0.0800543f,
	-0.964891f, 0.226979f, -0.59293f,     1.0f, 1.0f, 1.0f,     -0.150531f, -1.08867f, -0.448957f,
	0.053012f, 0.096279f, -0.61729f,     1.0f, 1.0f, 1.0f,     -0.150531f, -1.08867f, -0.448957f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     -0.150531f, -1.08867f, -0.448957f,
	0.082952f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     0.0824527f, 0.259418f, -0.107454f,
	-0.37728f, 1.36379f, -0.205776f,     1.0f, 1.0f, 1.0f,     0.0824527f, 0.259418f, -0.107454f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.0824527f, 0.259418f, -0.107454f,
	-0.37728f, 1.59727f, 0.357891f,     1.0f, 1.0f, 1.0f,     0.0824528f, 0.259418f, 0.107454f,
	-0.37728f, 1.36379f, 0.921559f,     1.0f, 1.0f, 1.0f,     0.0824528f, 0.259418f, 0.107454f,
	0.082952f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     0.0824528f, 0.259418f, 0.107454f,
	0.051592f, -0.344599f, 0.45227f,     1.0f, 1.0f, 1.0f,     -0.52302f, -0.794132f, 0.32894f,
	0.051592f, 0.097509f, 1.51961f,     1.0f, 1.0f, 1.0f,     -0.52302f, -0.794132f, 0.32894f,
	-0.692435f, 0.351727f, 0.950336f,     1.0f, 1.0f, 1.0f,     -0.52302f, -0.794132f, 0.32894f,
	0.082952f, 1.26035f, 0.818124f,     1.0f, 1.0f, 1.0f,     0.0964186f, 0.159802f, 0.269211f,
	-0.37728f, 1.36379f, 0.921559f,     1.0f, 1.0f, 1.0f,     0.0964186f, 0.159802f, 0.269211f,
	-0.162844f, 0.730648f, 1.22059f,     1.0f, 1.0f, 1.0f,     0.0964186f, 0.159802f, 0.269211f,
	-1.03383f, 0.914944f, -0.426114f,     1.0f, 1.0f, 1.0f,     -0.0692168f, 0.169317f, -0.138662f,
	-0.837513f, 1.26035f, -0.102341f,     1.0f, 1.0f, 1.0f,     -0.0692168f, 0.169317f, -0.138662f,
	-0.37728f, 1.36379f, -0.205776f,     1.0f, 1.0f, 1.0f,     -0.0692168f, 0.169317f, -0.138662f,
	-0.964891f, 0.226979f, -0.59293f,     1.0f, 1.0f, 1.0f,     -0.162756f, 0.148992f, -0.681721f,
	-1.03383f, 0.914944f, -0.426114f,     1.0f, 1.0f, 1.0f,     -0.162756f, 0.148992f, -0.681721f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     -0.162756f, 0.148992f, -0.681721f,
	0.503013f, 0.776861f, 1.07094f,     1.0f, 1.0f, 1.0f,     0.080929f, 0.231199f, 0.43149f,
	-0.162844f, 0.730648f, 1.22059f,     1.0f, 1.0f, 1.0f,     0.080929f, 0.231199f, 0.43149f,
	0.051592f, 0.097509f, 1.51961f,     1.0f, 1.0f, 1.0f,     0.080929f, 0.231199f, 0.43149f,
	-0.692435f, 0.351727f, 0.950336f,     1.0f, 1.0f, 1.0f,     -0.146293f, -0.005746f, 0.145954f,
	-0.754927f, 0.727201f, 0.902481f,     1.0f, 1.0f, 1.0f,     -0.146293f, -0.005746f, 0.145954f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.146293f, -0.005746f, 0.145954f,
	0.455915f, 0.361754f, -0.240278f,     1.0f, 1.0f, 1.0f,     0.248706f, 0.0206593f, -0.0876304f,
	0.426636f, 0.752255f, -0.231313f,     1.0f, 1.0f, 1.0f,     0.248706f, 0.0206593f, -0.0876304f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.248706f, 0.0206593f, -0.0876304f,
	-0.162844f, 0.730648f, 1.22059f,     1.0f, 1.0f, 1.0f,     -0.119605f, 0.00845511f, 0.222527f,
	-0.754927f, 0.727201f, 0.902481f,     1.0f, 1.0f, 1.0f,     -0.119605f, 0.00845511f, 0.222527f,
	-0.692435f, 0.351727f, 0.950336f,     1.0f, 1.0f, 1.0f,     -0.119605f, 0.00845511f, 0.222527f,
	0.652661f, 0.730648f, 0.405081f,     1.0f, 1.0f, 1.0f,     0.333619f, 0.317534f, 0.0529412f,
	0.503013f, 0.776861f, 1.07094f,     1.0f, 1.0f, 1.0f,     0.333619f, 0.317534f, 0.0529412f,
	0.923074f, 0.29337f, 1.32375f,     1.0f, 1.0f, 1.0f,     0.333619f, 0.317534f, 0.0529412f,
	-0.037492f, 0.860883f, -0.675799f,     1.0f, 1.0f, 1.0f,     0.174546f, 0.017175f, -0.178062f,
	0.426636f, 0.752255f, -0.231313f,     1.0f, 1.0f, 1.0f,     0.174546f, 0.017175f, -0.178062f,
	0.455915f, 0.361754f, -0.240278f,     1.0f, 1.0f, 1.0f,     0.174546f, 0.017175f, -0.178062f,
	-1.15669f, 0.805567f, 0.502872f,     1.0f, 1.0f, 1.0f,     -0.657356f, -0.0435527f, -0.0920614f,
	-1.03383f, 0.914944f, -0.426114f,     1.0f, 1.0f, 1.0f,     -0.657356f, -0.0435527f, -0.0920614f,
	-0.964891f, 0.226979f, -0.59293f,     1.0f, 1.0f, 1.0f,     -0.657356f, -0.0435527f, -0.0920614f,
};
